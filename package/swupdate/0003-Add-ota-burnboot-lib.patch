From 2d7236d38b3b251bf72851bd39756667423a11be Mon Sep 17 00:00:00 2001
From: wujiayi <wujiayi@allwinnertech.com>
Date: Fri, 9 Apr 2021 20:06:43 +0800
Subject: [PATCH] Add ota-burnboot lib

---
 Kconfig                   |   4 ++
 Makefile.deps             |   4 ++
 Makefile.flags            |   6 +++
 handlers/Config.in        |   7 +++
 handlers/Makefile         |   2 +-
 handlers/awboot_handler.c | 101 ++++++++++++++++++++++++++++++++++++++
 include/OTA_BurnBoot.h    |   7 +++
 7 files changed, 130 insertions(+), 1 deletion(-)
 create mode 100644 handlers/awboot_handler.c
 create mode 100644 include/OTA_BurnBoot.h

diff --git a/Kconfig b/Kconfig
index 302166e..6ad50d0 100644
--- a/Kconfig
+++ b/Kconfig
@@ -25,6 +25,10 @@ config HAVE_LIBCONFIG
 	bool
 	option env="HAVE_LIBCONFIG"
 
+config HAVE_OTA_BURNBOOT
+	bool
+	option env="HAVE_OTA_BURNBOOT"
+
 config HAVE_LIBARCHIVE
 	bool
 	option env="HAVE_LIBARCHIVE"
diff --git a/Makefile.deps b/Makefile.deps
index e2bf669..525a591 100644
--- a/Makefile.deps
+++ b/Makefile.deps
@@ -6,6 +6,10 @@ ifeq ($(HAVE_LIBCONFIG),)
 export HAVE_LIBCONFIG = y
 endif
 
+ifeq ($(HAVE_OTA_BURNBOOT),)
+export HAVE_OTA_BURNBOOT
+endif
+
 ifeq ($(HAVE_LIBARCHIVE),)
 export HAVE_LIBARCHIVE = y
 endif
diff --git a/Makefile.flags b/Makefile.flags
index b7b7389..a774fac 100644
--- a/Makefile.flags
+++ b/Makefile.flags
@@ -127,6 +127,12 @@ ifeq ($(CONFIG_LIBCONFIG),y)
 LDLIBS += config
 endif
 
+
+ifeq ($(CONFIG_OTA_BURNBOOT),y)
+LDLIBS += ota-burnboot
+endif
+
+
 # libarchive
 ifeq ($(CONFIG_ARCHIVE),y)
 LDLIBS += archive
diff --git a/handlers/Config.in b/handlers/Config.in
index 12a50b4..b275c17 100644
--- a/handlers/Config.in
+++ b/handlers/Config.in
@@ -5,6 +5,13 @@
 
 menu "Image Handlers"
 
+config OTA_BURNBOOT
+	bool "ota-burnboot"
+	default y
+	depends on HAVE_OTA_BURNBOOT
+	help
+	  Use ota-burnboot to update uboot and boot0.
+
 config UBIVOL
 	bool "ubivol"
 	default n
diff --git a/handlers/Makefile b/handlers/Makefile
index 92e6476..32f766b 100755
--- a/handlers/Makefile
+++ b/handlers/Makefile
@@ -9,7 +9,7 @@
 # on the received image type.
 obj-y	+= dummy_handler.o
 obj-y	+= sparse/
-#obj-y	+= awboot_handler.o
+obj-$(CONFIG_OTA_BURNBOOT)	+= awboot_handler.o
 obj-$(CONFIG_ARCHIVE) += archive_handler.o
 obj-$(CONFIG_BOOTLOADERHANDLER) += boot_handler.o
 obj-$(CONFIG_CFI)	+= flash_handler.o
diff --git a/handlers/awboot_handler.c b/handlers/awboot_handler.c
new file mode 100644
index 0000000..47664c1
--- /dev/null
+++ b/handlers/awboot_handler.c
@@ -0,0 +1,101 @@
+/*
+ * (C) Copyright 2018
+ * zhuangqiubin, Allwinner Software Engineering, zhuangqiubin@allwinnertech.com
+ *
+ * SPDX-License-Identifier:     GPL-2.0-or-later
+ */
+
+#include <sys/types.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/stat.h>
+#include <unistd.h>
+#include <errno.h>
+
+#include "generated/autoconf.h"
+#include "swupdate.h"
+#include "swupdate_dict.h"
+#include "handler.h"
+#include "util.h"
+
+#include "OTA_BurnBoot.h"
+
+static void awuboot_handler(void);
+static void awboot0_handler(void);
+
+static int install_awboot0(struct img_type *img,
+	void __attribute__ ((__unused__)) *data)
+{
+	int ret;
+	int fdout;
+	FILE *fp;
+	char *buf;
+	char filename[64];
+	struct stat statbuf;
+
+	if (snprintf(filename, sizeof(filename), "%s%s", get_tmpdirscripts(),
+		     img->fname) >= (int)sizeof(filename)) {
+		ERROR("Path too long: %s%s", get_tmpdirscripts(),
+			 img->fname);
+		return -1;
+	}
+
+	ret = stat(filename, &statbuf);
+	if (ret) {
+		fdout = openfileoutput(filename);
+		ret = copyimage(&fdout, img, NULL);
+		close(fdout);
+	}
+
+	ret = OTA_burnboot0(filename);
+	if (ret) {
+		ERROR("OTA_burnboot0 fail, ret is %d\n", ret);
+	}
+
+	return ret;
+}
+
+static int install_awuboot(struct img_type *img,
+	void __attribute__ ((__unused__)) *data)
+{
+	int ret;
+	int fdout;
+	FILE *fp;
+	char *buf;
+	char filename[64];
+	struct stat statbuf;
+
+	if (snprintf(filename, sizeof(filename), "%s%s", get_tmpdirscripts(),
+		     img->fname) >= (int)sizeof(filename)) {
+		ERROR("Path too long: %s%s", get_tmpdirscripts(),
+			 img->fname);
+		return -1;
+	}
+
+	ret = stat(filename, &statbuf);
+	if (ret) {
+		fdout = openfileoutput(filename);
+		ret = copyimage(&fdout, img, NULL);
+		close(fdout);
+	}
+
+	ret = OTA_burnuboot(filename);
+	if (ret) {
+		ERROR("OTA_burnuboot fail, ret is %d\n", ret);
+	}
+
+	return ret;
+}
+
+__attribute__((constructor))
+static void awuboot_handler(void)
+{
+	register_handler("awuboot", install_awuboot, IMAGE_HANDLER, NULL);
+}
+
+__attribute__((constructor))
+static void awboot0_handler(void)
+{
+	register_handler("awboot0", install_awboot0, IMAGE_HANDLER, NULL);
+}
diff --git a/include/OTA_BurnBoot.h b/include/OTA_BurnBoot.h
new file mode 100644
index 0000000..5a17de8
--- /dev/null
+++ b/include/OTA_BurnBoot.h
@@ -0,0 +1,7 @@
+#ifndef __OTA_BOOT_H
+#define __OTA_BOOT_H
+
+int OTA_burnboot0(const char *img_path);
+int OTA_burnuboot(const char *img_path);
+
+#endif
-- 
2.29.0

